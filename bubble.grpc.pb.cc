// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: bubble.proto

#include "bubble.pb.h"
#include "bubble.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace bubble_grpc {

static const char* SortingService_method_names[] = {
  "/bubble_grpc.SortingService/Sort",
};

std::unique_ptr< SortingService::Stub> SortingService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SortingService::Stub> stub(new SortingService::Stub(channel));
  return stub;
}

SortingService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Sort_(SortingService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SortingService::Stub::Sort(::grpc::ClientContext* context, const ::bubble_grpc::SortRequest& request, ::bubble_grpc::SortResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Sort_, context, request, response);
}

void SortingService::Stub::experimental_async::Sort(::grpc::ClientContext* context, const ::bubble_grpc::SortRequest* request, ::bubble_grpc::SortResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Sort_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::bubble_grpc::SortResponse>* SortingService::Stub::AsyncSortRaw(::grpc::ClientContext* context, const ::bubble_grpc::SortRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bubble_grpc::SortResponse>::Create(channel_.get(), cq, rpcmethod_Sort_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bubble_grpc::SortResponse>* SortingService::Stub::PrepareAsyncSortRaw(::grpc::ClientContext* context, const ::bubble_grpc::SortRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bubble_grpc::SortResponse>::Create(channel_.get(), cq, rpcmethod_Sort_, context, request, false);
}

SortingService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SortingService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SortingService::Service, ::bubble_grpc::SortRequest, ::bubble_grpc::SortResponse>(
          std::mem_fn(&SortingService::Service::Sort), this)));
}

SortingService::Service::~Service() {
}

::grpc::Status SortingService::Service::Sort(::grpc::ServerContext* context, const ::bubble_grpc::SortRequest* request, ::bubble_grpc::SortResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace bubble_grpc

